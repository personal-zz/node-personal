// Generated by CoffeeScript 1.4.0
(function() {
  var PersonalScope, _are_colls_equiv,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  PersonalScope = require("../index").Scope;

  require("should");

  _are_colls_equiv = function(arr1, arr2) {
    var item, to_return, _i, _j, _len, _len1;
    to_return = true;
    for (_i = 0, _len = arr1.length; _i < _len; _i++) {
      item = arr1[_i];
      if (!(__indexOf.call(arr2, item) >= 0)) {
        to_return = false;
      }
    }
    for (_j = 0, _len1 = arr2.length; _j < _len1; _j++) {
      item = arr2[_j];
      if (!(__indexOf.call(arr1, item) >= 0)) {
        to_return = false;
      }
    }
    return to_return;
  };

  describe("PersonalScope", function() {
    describe("#constructor", function() {
      it("should create a cartesian product of perms", function() {
        var prod_arr, scope, soln;
        soln = ['read_0000', 'write_0000', 'read_9999', 'write_9999'];
        scope = new PersonalScope({
          permissions: ['read', 'write'],
          resources: ['0000', '9999']
        });
        prod_arr = scope.to_a();
        prod_arr.length.should.equal(4);
        return _are_colls_equiv(soln, prod_arr).should.be["true"];
      });
      it("should merge literal and cartesian product of perms", function() {
        var prod_arr, scope, soln;
        soln = ['read_0000', 'write_0000', 'read_9999', 'write_9999', 'read_access', 'write_contacts', 'write_messages'];
        scope = new PersonalScope({
          permissions: ['read', 'write'],
          resources: ['0000', '9999'],
          literal: 'read_access,write_contacts,write_messages'
        });
        prod_arr = scope.to_a();
        prod_arr.length.should.equal(7);
        return _are_colls_equiv(soln, prod_arr).should.be["true"];
      });
      return it("should reject invalid template IDs", function() {
        var scope;
        scope = new PersonalScope({
          permissions: ['read', 'write', 'create', 'grant'],
          resources: ['1', '12', '123', '12345', '123456', '1234567', '1`2345678', '123456789']
        });
        return scope.to_a().length.should.equal(0);
      });
    });
    return describe("#to_s", function() {
      return it("should contain all permissions", function() {
        var prod_arr, prod_str, scope, soln;
        soln = ['read_0000', 'write_0000', 'read_9999', 'write_9999'];
        scope = new PersonalScope({
          permissions: ['read', 'write'],
          resources: ['0000', '9999']
        });
        prod_str = scope.to_s();
        prod_arr = prod_str.split(",");
        return _are_colls_equiv(soln, prod_arr).should.be["true"];
      });
    });
  });

}).call(this);
