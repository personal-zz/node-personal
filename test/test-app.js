// Generated by CoffeeScript 1.4.0
(function() {
  var PersonalApp, PersonalScope, crypto, http, qs, url, _are_colls_equiv,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  PersonalScope = require("../index").Scope;

  PersonalApp = require("../index").App;

  crypto = require("crypto");

  qs = require("querystring");

  http = require("http");

  url = require("url");

  require("should");

  _are_colls_equiv = function(arr1, arr2) {
    var item, to_return, _i, _j, _len, _len1;
    to_return = true;
    for (_i = 0, _len = arr1.length; _i < _len; _i++) {
      item = arr1[_i];
      if (!(__indexOf.call(arr2, item) >= 0)) {
        to_return = false;
      }
    }
    for (_j = 0, _len1 = arr2.length; _j < _len1; _j++) {
      item = arr2[_j];
      if (!(__indexOf.call(arr1, item) >= 0)) {
        to_return = false;
      }
    }
    return to_return;
  };

  describe("PersonalApp", function() {
    var app, sample_code, sample_redirect_uri, sample_state, scope;
    app = new PersonalApp({
      client_id: "clientid",
      client_secret: "clientsecret",
      sandbox: true
    });
    scope = new PersonalScope({
      permissions: ['read'],
      resources: ['0135']
    });
    sample_state = crypto.randomBytes(32).toString('hex');
    sample_code = crypto.randomBytes(10).toString('hex');
    sample_redirect_uri = "http://localhost";
    describe("#get_auth_request_url", function() {
      var auth_req_obj, redir_url_obj, url_obj;
      auth_req_obj = app.get_auth_request_url({
        redirect_uri: "http://localhost",
        scope: scope,
        update: false,
        sandbox: true
      });
      url_obj = url.parse(auth_req_obj.url, true);
      redir_url_obj = url.parse(url_obj.query.redirect_uri, true);
      it("should set correct client_id", function() {
        return url_obj.query.client_id.should.equal("clientid");
      });
      it("should set correct host and path", function() {
        url_obj.host.should.equal("api-sandbox.personal.com");
        return url_obj.pathname.should.equal("/oauth/authorize");
      });
      it("should set correct response type", function() {
        return url_obj.query.response_type.should.equal("code");
      });
      it("should set correct redirect url", function() {
        redir_url_obj.protocol.should.equal("http:");
        redir_url_obj.host.should.equal("localhost");
        return url.format(redir_url_obj).should.equal(auth_req_obj.redirect_uri);
      });
      it("should set correct scope", function() {
        return url_obj.query.scope.should.equal("read_0135");
      });
      it("should set correct update value", function() {
        return url_obj.query.update.should.equal("false");
      });
      return it("should set a 32-byte state value", function() {
        redir_url_obj.query.state.length.should.equal(64);
        return auth_req_obj.state.should.equal(redir_url_obj.query.state);
      });
    });
    return describe("#get_access_token_auth", function() {
      it("should reject empty code", function(done) {
        var promise;
        promise = app.get_access_token_auth({
          state: sample_state,
          redirect_uri: "http://localhost"
        });
        return promise.then(function(data) {
          return done(new Error("Did not reject empty code"));
        }, function(err) {
          return done();
        });
      });
      it("should reject invalid code", function(done) {
        var promise;
        promise = app.get_access_token_auth({
          state: sample_state,
          redirect_uri: "http://localhost",
          code: "too short"
        });
        return promise.then(function(data) {
          return done(new Error("Did not reject invalid code"));
        }, function(err) {
          return done();
        });
      });
      it("should reject empty redirect_uri", function(done) {
        var promise;
        promise = app.get_access_token_auth({
          code: sample_code,
          state: sample_state
        });
        return promise.then(function(data) {
          return done(new Error("Did not reject empty redirect_uri"));
        }, function(err) {
          return done();
        });
      });
      it("should reject via callback argument", function(done) {
        return app.get_access_token_auth({
          code: sample_code,
          state: sample_state
        }, function(err, data) {
          if (err != null) {
            return done();
          } else {
            return done(new Error("Rejection not accomplished via callback"));
          }
        });
      });
      return it("should return the proper access object", function(done) {
        var promise, soln, test_app, test_srv;
        soln = {
          access_token: "sampleaccesstoken",
          refresh_token: "samplerefreshtoken"
        };
        test_app = new PersonalApp({
          client_id: "clientid",
          client_secret: "clientsecret",
          test: true
        });
        test_srv = http.createServer(function(req, res) {
          var body;
          body = "";
          if (req.method !== "POST") {
            test_srv.close();
            done(new Error("POST not being used"));
          }
          req.on("data", function(chunk) {
            if (chunk != null) {
              return body += chunk;
            }
          });
          return req.on("end", function() {
            var post_obj;
            post_obj = qs.parse(body);
            if (!(post_obj.grant_type != null) || post_obj.grant_type !== "authorization_code") {
              done(new Error("Wrong grant type provided"));
            }
            if (!(post_obj.code != null) || post_obj.code !== sample_code) {
              done(new Error("Wrong code provided"));
            }
            if (!(post_obj.redirect_uri != null) || post_obj.redirect_uri !== sample_redirect_uri) {
              done(new Error("Wrong redirect URI"));
            }
            if (!(post_obj.client_id != null) || post_obj.client_id !== "clientid") {
              done(new Error("Wrong client_id"));
            }
            if (!(post_obj.client_secret != null) || post_obj.client_secret !== "clientsecret") {
              done(new Error("Wrong client secret"));
            }
            res.writeHead(200, {
              'Content-Type': "application/json"
            });
            return res.end(JSON.stringify({
              access_token: soln.access_token,
              refresh_token: soln.refresh_token,
              expires_in: 3600
            }));
          });
        });
        test_srv.listen(7357);
        promise = test_app.get_access_token_auth({
          code: sample_code,
          state: sample_state,
          redirect_uri: sample_redirect_uri
        });
        return promise.then(function(data) {
          if (data.access_token === soln.access_token && data.refresh_token === data.refresh_token && data.expiration > Date.now()) {
            return done();
          } else {
            console.err("access object: ", data);
            return done(new Error("access object was not correct"));
          }
        }, function(err) {
          test_srv.close();
          return done(err);
        });
      });
    });
  });

}).call(this);
